
MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009d  00800060  00800060  00000626  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ed8  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000082d  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ae  00000000  00000000  00001e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00002730  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a3  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000611  00000000  00000000  0000328f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	79 c0       	rjmp	.+242    	; 0xfe <__vector_5>
   c:	59 c0       	rjmp	.+178    	; 0xc0 <__vector_6>
   e:	49 c1       	rjmp	.+658    	; 0x2a2 <__vector_7>
  10:	99 c1       	rjmp	.+818    	; 0x344 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	92 c0       	rjmp	.+292    	; 0x13c <__vector_11>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d2 e0       	ldi	r29, 0x02	; 2
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 eb       	ldi	r30, 0xB2	; 178
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 3f       	cpi	r26, 0xFD	; 253
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	f1 d0       	rcall	.+482    	; 0x23c <main>
  5a:	a9 c2       	rjmp	.+1362   	; 0x5ae <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <request>:
	///*output_buffer_length = 2;
	//output_buffer[0] = (val >> 8) & 0xFF;
	//output_buffer[1] = val & 0xFF;
}

void idle() {
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	1f 92       	push	r1
  64:	cd b7       	in	r28, 0x3d	; 61
  66:	de b7       	in	r29, 0x3e	; 62
  68:	89 83       	std	Y+1, r24	; 0x01
  6a:	82 e0       	ldi	r24, 0x02	; 2
  6c:	fa 01       	movw	r30, r20
  6e:	80 83       	st	Z, r24
  70:	89 81       	ldd	r24, Y+1	; 0x01
  72:	88 23       	and	r24, r24
  74:	e9 f0       	breq	.+58     	; 0xb0 <request+0x52>
  76:	fb 01       	movw	r30, r22
  78:	80 81       	ld	r24, Z
  7a:	83 36       	cpi	r24, 0x63	; 99
  7c:	a1 f4       	brne	.+40     	; 0xa6 <request+0x48>
  7e:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <adcval0>
  82:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <adcval0+0x1>
  86:	a0 91 fb 00 	lds	r26, 0x00FB	; 0x8000fb <adcval0+0x2>
  8a:	b0 91 fc 00 	lds	r27, 0x00FC	; 0x8000fc <adcval0+0x3>
  8e:	68 94       	set
  90:	14 f8       	bld	r1, 4
  92:	b6 95       	lsr	r27
  94:	a7 95       	ror	r26
  96:	97 95       	ror	r25
  98:	87 95       	ror	r24
  9a:	16 94       	lsr	r1
  9c:	d1 f7       	brne	.-12     	; 0x92 <request+0x34>
  9e:	f9 01       	movw	r30, r18
  a0:	90 83       	st	Z, r25
  a2:	81 83       	std	Z+1, r24	; 0x01
  a4:	09 c0       	rjmp	.+18     	; 0xb8 <request+0x5a>
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	f9 01       	movw	r30, r18
  aa:	80 83       	st	Z, r24
  ac:	81 83       	std	Z+1, r24	; 0x01
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <request+0x5a>
  b0:	88 e5       	ldi	r24, 0x58	; 88
  b2:	f9 01       	movw	r30, r18
  b4:	80 83       	st	Z, r24
  b6:	81 83       	std	Z+1, r24	; 0x01
  b8:	0f 90       	pop	r0
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	08 95       	ret

000000c0 <__vector_6>:
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	98 0f       	add	r25, r24
  d6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	80 ff       	sbrs	r24, 0
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <__vector_6+0x26>
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	03 c0       	rjmp	.+6      	; 0xec <__vector_6+0x2c>
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	8f 7b       	andi	r24, 0xBF	; 191
  ea:	88 bb       	out	0x18, r24	; 24
  ec:	80 eb       	ldi	r24, 0xB0	; 176
  ee:	82 bf       	out	0x32, r24	; 50
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_5>:
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	98 0f       	add	r25, r24
 114:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 118:	80 ff       	sbrs	r24, 0
 11a:	04 c0       	rjmp	.+8      	; 0x124 <__vector_5+0x26>
 11c:	88 b3       	in	r24, 0x18	; 24
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	88 bb       	out	0x18, r24	; 24
 122:	03 c0       	rjmp	.+6      	; 0x12a <__vector_5+0x2c>
 124:	88 b3       	in	r24, 0x18	; 24
 126:	8f 7b       	andi	r24, 0xBF	; 191
 128:	88 bb       	out	0x18, r24	; 24
 12a:	80 eb       	ldi	r24, 0xB0	; 176
 12c:	8e bd       	out	0x2e, r24	; 46
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_11>:
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
 166:	84 b1       	in	r24, 0x04	; 4
 168:	25 b1       	in	r18, 0x05	; 5
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	32 2f       	mov	r19, r18
 16e:	22 27       	eor	r18, r18
 170:	28 2b       	or	r18, r24
 172:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <adcval0>
 176:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <adcval0+0x1>
 17a:	a0 91 fb 00 	lds	r26, 0x00FB	; 0x8000fb <adcval0+0x2>
 17e:	b0 91 fc 00 	lds	r27, 0x00FC	; 0x8000fc <adcval0+0x3>
 182:	ac 01       	movw	r20, r24
 184:	bd 01       	movw	r22, r26
 186:	42 0f       	add	r20, r18
 188:	53 1f       	adc	r21, r19
 18a:	61 1d       	adc	r22, r1
 18c:	71 1d       	adc	r23, r1
 18e:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <iAdcBuffer>
 192:	8e 2f       	mov	r24, r30
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	8f 71       	andi	r24, 0x1F	; 31
 19a:	90 78       	andi	r25, 0x80	; 128
 19c:	99 23       	and	r25, r25
 19e:	24 f4       	brge	.+8      	; 0x1a8 <__vector_11+0x6c>
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	80 6e       	ori	r24, 0xE0	; 224
 1a4:	9f 6f       	ori	r25, 0xFF	; 255
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	dc 01       	movw	r26, r24
 1ae:	a7 54       	subi	r26, 0x47	; 71
 1b0:	bf 4f       	sbci	r27, 0xFF	; 255
 1b2:	8d 91       	ld	r24, X+
 1b4:	9c 91       	ld	r25, X
 1b6:	7a 01       	movw	r14, r20
 1b8:	8b 01       	movw	r16, r22
 1ba:	e8 1a       	sub	r14, r24
 1bc:	f9 0a       	sbc	r15, r25
 1be:	01 09       	sbc	r16, r1
 1c0:	11 09       	sbc	r17, r1
 1c2:	e0 92 f9 00 	sts	0x00F9, r14	; 0x8000f9 <adcval0>
 1c6:	f0 92 fa 00 	sts	0x00FA, r15	; 0x8000fa <adcval0+0x1>
 1ca:	00 93 fb 00 	sts	0x00FB, r16	; 0x8000fb <adcval0+0x2>
 1ce:	10 93 fc 00 	sts	0x00FC, r17	; 0x8000fc <adcval0+0x3>
 1d2:	ef 5f       	subi	r30, 0xFF	; 255
 1d4:	ef 71       	andi	r30, 0x1F	; 31
 1d6:	e0 93 61 00 	sts	0x0061, r30	; 0x800061 <iAdcBuffer>
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	ee 0f       	add	r30, r30
 1de:	ff 1f       	adc	r31, r31
 1e0:	e7 54       	subi	r30, 0x47	; 71
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	31 83       	std	Z+1, r19	; 0x01
 1e6:	20 83       	st	Z, r18
 1e8:	86 b1       	in	r24, 0x06	; 6
 1ea:	80 61       	ori	r24, 0x10	; 16
 1ec:	86 b9       	out	0x06, r24	; 6
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <timer1_setup>:
 218:	10 be       	out	0x30, r1	; 48
 21a:	1f bc       	out	0x2f, r1	; 47
 21c:	8f b5       	in	r24, 0x2f	; 47
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	8f bd       	out	0x2f, r24	; 47
 222:	86 ef       	ldi	r24, 0xF6	; 246
 224:	8e bd       	out	0x2e, r24	; 46
 226:	89 b7       	in	r24, 0x39	; 57
 228:	84 60       	ori	r24, 0x04	; 4
 22a:	89 bf       	out	0x39, r24	; 57
 22c:	08 95       	ret

0000022e <adc_setup>:
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	87 b9       	out	0x07, r24	; 7
 232:	88 ea       	ldi	r24, 0xA8	; 168
 234:	86 b9       	out	0x06, r24	; 6
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	83 b9       	out	0x03, r24	; 3
 23a:	08 95       	ret

0000023c <main>:
	MCUCR&=~(1<<SE);
}*/

int main(void)
{
	DDRB|=(1<<PB6);
 23c:	87 b3       	in	r24, 0x17	; 23
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	87 bb       	out	0x17, r24	; 23
	adc_setup();
 242:	f5 df       	rcall	.-22     	; 0x22e <adc_setup>
	timer1_setup();
 244:	e9 df       	rcall	.-46     	; 0x218 <timer1_setup>
	usi_twi_slave(DEVICE_ADDRESS, 1, request, ((void*)0));
 246:	20 e0       	ldi	r18, 0x00	; 0
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	4f e2       	ldi	r20, 0x2F	; 47
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	28 d1       	rcall	.+592    	; 0x4a4 <usi_twi_slave>
	sei();
 254:	78 94       	sei
 256:	ff cf       	rjmp	.-2      	; 0x256 <main+0x1a>

00000258 <set_sda_to_input>:
static uint16_t	local_frames_count;
static uint16_t	idle_call_count;

static void set_sda_to_input(void)
{
	DDR_USI &= ~_BV(PORT_USI_SDA);
 258:	8a b3       	in	r24, 0x1a	; 26
 25a:	8e 7f       	andi	r24, 0xFE	; 254
 25c:	8a bb       	out	0x1a, r24	; 26
 25e:	08 95       	ret

00000260 <set_sda_to_output>:
}

static void set_sda_to_output(void)
{
	DDR_USI |= _BV(PORT_USI_SDA);
 260:	8a b3       	in	r24, 0x1a	; 26
 262:	81 60       	ori	r24, 0x01	; 1
 264:	8a bb       	out	0x1a, r24	; 26
 266:	08 95       	ret

00000268 <twi_reset>:

static void twi_reset(void)
{
	// make sure no sda/scl remains pulled up or down

	set_sda_to_input();		//	deactivate internal pullup on sda/scl
 268:	f7 df       	rcall	.-18     	; 0x258 <set_sda_to_input>
	DDR_USI |= _BV(PORT_USI_SCL);
}

static inline void set_sda_low(void)
{
	PORT_USI &= ~_BV(PORT_USI_SDA);
 26a:	8b b3       	in	r24, 0x1b	; 27
 26c:	8e 7f       	andi	r24, 0xFE	; 254
 26e:	8b bb       	out	0x1b, r24	; 27
	DDR_USI |= _BV(PORT_USI_SDA);
}

static inline void set_scl_to_input(void)
{
	DDR_USI &= ~_BV(PORT_USI_SCL);
 270:	8a b3       	in	r24, 0x1a	; 26
 272:	8b 7f       	andi	r24, 0xFB	; 251
 274:	8a bb       	out	0x1a, r24	; 26
	PORT_USI |= _BV(PORT_USI_SDA);
}

static inline void set_scl_low(void)
{
	PORT_USI &= ~_BV(PORT_USI_SCL);
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	8b 7f       	andi	r24, 0xFB	; 251
 27a:	8b bb       	out	0x1b, r24	; 27
	set_sda_to_input();		//	deactivate internal pullup on sda/scl
	set_sda_low();
	set_scl_to_input();
	set_scl_low();

	set_sda_to_output();	//	release (set high) on sda/scl
 27c:	f1 df       	rcall	.-30     	; 0x260 <set_sda_to_output>
	PORT_USI &= ~_BV(PORT_USI_SDA);
}

static inline void set_sda_high(void)
{
	PORT_USI |= _BV(PORT_USI_SDA);
 27e:	8b b3       	in	r24, 0x1b	; 27
 280:	81 60       	ori	r24, 0x01	; 1
 282:	8b bb       	out	0x1b, r24	; 27
	set_scl_to_input();
	set_scl_low();

	set_sda_to_output();	//	release (set high) on sda/scl
	set_sda_high();
	set_sda_to_input();
 284:	e9 df       	rcall	.-46     	; 0x258 <set_sda_to_input>
	PORT_USI &= ~_BV(PORT_USI_SDA);
}

static inline void set_sda_high(void)
{
	PORT_USI |= _BV(PORT_USI_SDA);
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	81 60       	ori	r24, 0x01	; 1
 28a:	8b bb       	out	0x1b, r24	; 27
	DDR_USI &= ~_BV(PORT_USI_SCL);
}

static inline void set_scl_to_output(void)
{
	DDR_USI |= _BV(PORT_USI_SCL);
 28c:	8a b3       	in	r24, 0x1a	; 26
 28e:	84 60       	ori	r24, 0x04	; 4
 290:	8a bb       	out	0x1a, r24	; 26
	PORT_USI &= ~_BV(PORT_USI_SCL);
}

static inline void set_scl_high(void)
{
	PORT_USI |= _BV(PORT_USI_SCL);
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	84 60       	ori	r24, 0x04	; 4
 296:	8b bb       	out	0x1b, r24	; 27
}

static inline void twi_reset_state(void)
{
	USISR =
 298:	80 ed       	ldi	r24, 0xD0	; 208
 29a:	8e b9       	out	0x0e, r24	; 14
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits

	USICR =
 29c:	88 ea       	ldi	r24, 0xA8	; 168
 29e:	8d b9       	out	0x0d, r24	; 13
 2a0:	08 95       	ret

000002a2 <__vector_7>:

	twi_reset();
}

ISR(USI_START_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
	set_sda_to_input();
 2c4:	c9 df       	rcall	.-110    	; 0x258 <set_sda_to_input>
	// start detector will hold SCL low) - if a stop condition arises then leave
	// the interrupt to prevent waiting forever - don't use USISR to test for stop
	// condition as in Application Note AVR312 because the stop condition Flag is
	// going to be set from the last TWI sequence

	while(!(PIN_USI & _BV(PIN_USI_SDA)) &&
 2c6:	11 c0       	rjmp	.+34     	; 0x2ea <__vector_7+0x48>
	//	sda = low	scl = low		break	start condition
	// 	sda = low	scl = high		loop
	//	sda = high	scl = low		break	stop condition
	//	sda = high	scl = high		break	stop condition

	if((PIN_USI & _BV(PIN_USI_SDA)))	// stop condition
 2c8:	c8 9b       	sbis	0x19, 0	; 25
 2ca:	0f c0       	rjmp	.+30     	; 0x2ea <__vector_7+0x48>
	{
		twi_reset();
 2cc:	cd df       	rcall	.-102    	; 0x268 <twi_reset>

		if(stats_enabled)
 2ce:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <stats_enabled>
 2d2:	88 23       	and	r24, r24
 2d4:	31 f1       	breq	.+76     	; 0x322 <__vector_7+0x80>
			error_conditions_count++;
 2d6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <error_conditions_count>
 2da:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <error_conditions_count+0x1>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <error_conditions_count+0x1>
 2e4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <error_conditions_count>
 2e8:	1c c0       	rjmp	.+56     	; 0x322 <__vector_7+0x80>
	// start detector will hold SCL low) - if a stop condition arises then leave
	// the interrupt to prevent waiting forever - don't use USISR to test for stop
	// condition as in Application Note AVR312 because the stop condition Flag is
	// going to be set from the last TWI sequence

	while(!(PIN_USI & _BV(PIN_USI_SDA)) &&
 2ea:	c8 99       	sbic	0x19, 0	; 25
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_7+0x50>
 2ee:	ca 99       	sbic	0x19, 2	; 25
 2f0:	eb cf       	rjmp	.-42     	; 0x2c8 <__vector_7+0x26>
		if(stats_enabled)
			error_conditions_count++;
		return;
	}

	if(stats_enabled)
 2f2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <stats_enabled>
 2f6:	88 23       	and	r24, r24
 2f8:	49 f0       	breq	.+18     	; 0x30c <__vector_7+0x6a>
		start_conditions_count++;
 2fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <start_conditions_count>
 2fe:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <start_conditions_count+0x1>
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <start_conditions_count+0x1>
 308:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <start_conditions_count>

	of_state = of_state_check_address;
 30c:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <of_state>
	ss_state = ss_state_after_start;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <ss_state>

	USIDR = 0xff;
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	8f b9       	out	0x0f, r24	; 15

	USICR =
 31a:	88 ef       	ldi	r24, 0xF8	; 248
 31c:	8d b9       	out	0x0d, r24	; 13
		(1 << USIOIE) |									// enable overflow interrupt
		(1 << USIWM1) | (1 << USIWM0) |					// set usi in two-wire mode, enable bit counter overflow hold
		(1 << USICS1) | (0 << USICS0) | (0 << USICLK) |	// shift register clock source = external, positive edge, 4-bit counter source = external, both edges
		(0 << USITC);									// don't toggle clock-port pin

	USISR =
 31e:	80 ed       	ldi	r24, 0xD0	; 208
 320:	8e b9       	out	0x0e, r24	; 14
		(1		<< USISIF)	|		// clear start condition flag
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits
}
 322:	ff 91       	pop	r31
 324:	ef 91       	pop	r30
 326:	bf 91       	pop	r27
 328:	af 91       	pop	r26
 32a:	9f 91       	pop	r25
 32c:	8f 91       	pop	r24
 32e:	7f 91       	pop	r23
 330:	6f 91       	pop	r22
 332:	5f 91       	pop	r21
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <__vector_8>:

ISR(USI_OVERFLOW_VECTOR)
{
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
	// bit shift register overflow condition occured
	// scl forced low until overflow condition is cleared!

	uint8_t data		= USIDR;
 366:	2f b1       	in	r18, 0x0f	; 15
	uint8_t set_counter = 0x00;		// send 8 bits (16 edges)

	if(stats_enabled)
 368:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <stats_enabled>
 36c:	88 23       	and	r24, r24
 36e:	49 f0       	breq	.+18     	; 0x382 <__vector_8+0x3e>
		overflow_conditions_count++;
 370:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <overflow_conditions_count>
 374:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <overflow_conditions_count+0x1>
 378:	01 96       	adiw	r24, 0x01	; 1
 37a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <overflow_conditions_count+0x1>
 37e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <overflow_conditions_count>

again:
	switch(of_state)
 382:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <of_state>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	09 f4       	brne	.+2      	; 0x38c <__vector_8+0x48>
 38a:	4a c0       	rjmp	.+148    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 38c:	28 f4       	brcc	.+10     	; 0x398 <__vector_8+0x54>
 38e:	88 23       	and	r24, r24
 390:	61 f0       	breq	.+24     	; 0x3aa <__vector_8+0x66>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	59 f1       	breq	.+86     	; 0x3ec <__vector_8+0xa8>
 396:	72 c0       	rjmp	.+228    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 398:	84 30       	cpi	r24, 0x04	; 4
 39a:	09 f4       	brne	.+2      	; 0x39e <__vector_8+0x5a>
 39c:	53 c0       	rjmp	.+166    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 39e:	08 f4       	brcc	.+2      	; 0x3a2 <__vector_8+0x5e>
 3a0:	46 c0       	rjmp	.+140    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3a2:	85 30       	cpi	r24, 0x05	; 5
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <__vector_8+0x64>
 3a6:	57 c0       	rjmp	.+174    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3a8:	69 c0       	rjmp	.+210    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		case(of_state_check_address):
		{
			uint8_t address;
			uint8_t direction;

			direction	= data & 0x01;
 3aa:	92 2f       	mov	r25, r18
 3ac:	91 70       	andi	r25, 0x01	; 1
			address		= (data & 0xfe) >> 1;
 3ae:	26 95       	lsr	r18

			if(address == slave_address)
 3b0:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <slave_address>
 3b4:	28 13       	cpse	r18, r24
 3b6:	10 c0       	rjmp	.+32     	; 0x3d8 <__vector_8+0x94>
			{
				ss_state = ss_state_address_selected;
 3b8:	82 e0       	ldi	r24, 0x02	; 2
 3ba:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <ss_state>

				if(direction)					// read request from master
 3be:	99 23       	and	r25, r25
 3c0:	21 f0       	breq	.+8      	; 0x3ca <__vector_8+0x86>
					of_state = of_state_send_data;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <of_state>
 3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <__vector_8+0x8c>
				else							// write request from master
					of_state = of_state_receive_data;
 3ca:	84 e0       	ldi	r24, 0x04	; 4
 3cc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <of_state>

				USIDR		= 0x00;
 3d0:	1f b8       	out	0x0f, r1	; 15
				set_counter = 0x0e;				// send 1 bit (2 edges)
				set_sda_to_output();			// initiate send ack
 3d2:	46 df       	rcall	.-372    	; 0x260 <set_sda_to_output>
					of_state = of_state_send_data;
				else							// write request from master
					of_state = of_state_receive_data;

				USIDR		= 0x00;
				set_counter = 0x0e;				// send 1 bit (2 edges)
 3d4:	8e e0       	ldi	r24, 0x0E	; 14
 3d6:	53 c0       	rjmp	.+166    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				set_sda_to_output();			// initiate send ack
			}
			else
			{
				USIDR		= 0x00;
 3d8:	1f b8       	out	0x0f, r1	; 15
	PORT_USI |= _BV(PORT_USI_SCL);
}

static inline void twi_reset_state(void)
{
	USISR =
 3da:	80 ed       	ldi	r24, 0xD0	; 208
 3dc:	8e b9       	out	0x0e, r24	; 14
		(1		<< USIOIF)	|		// clear overflow condition flag
		(0		<< USIPF)	|		// !clear stop condition flag
		(1		<< USIDC)	|		// clear arbitration error flag
		(0x00	<< USICNT0);		// set counter to "8" bits

	USICR =
 3de:	88 ea       	ldi	r24, 0xA8	; 168
 3e0:	8d b9       	out	0x0d, r24	; 13
			else
			{
				USIDR		= 0x00;
				set_counter = 0x00;
				twi_reset_state();
				ss_state = ss_state_address_not_selected;
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <ss_state>
				set_sda_to_output();			// initiate send ack
			}
			else
			{
				USIDR		= 0x00;
				set_counter = 0x00;
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	49 c0       	rjmp	.+146    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>

		// process read request from master

		case(of_state_send_data):
		{
			ss_state = ss_state_data_processed;
 3ec:	84 e0       	ldi	r24, 0x04	; 4
 3ee:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <ss_state>
			of_state = of_state_request_ack;
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <of_state>

			if(output_buffer_current < output_buffer_length)
 3f8:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <output_buffer_current>
 3fc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <output_buffer_length>
 400:	e8 17       	cp	r30, r24
 402:	50 f4       	brcc	.+20     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				USIDR = output_buffer[output_buffer_current++];
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	8e 0f       	add	r24, r30
 408:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <output_buffer_current>
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	ef 58       	subi	r30, 0x8F	; 143
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	80 81       	ld	r24, Z
 414:	8f b9       	out	0x0f, r24	; 15
 416:	01 c0       	rjmp	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			else
				USIDR = 0x00;					// no more data, but cannot send "nothing" or "nak"
 418:	1f b8       	out	0x0f, r1	; 15

			set_counter = 0x00;
			set_sda_to_output();				// initiate send data
 41a:	22 df       	rcall	.-444    	; 0x260 <set_sda_to_output>
			if(output_buffer_current < output_buffer_length)
				USIDR = output_buffer[output_buffer_current++];
			else
				USIDR = 0x00;					// no more data, but cannot send "nothing" or "nak"

			set_counter = 0x00;
 41c:	80 e0       	ldi	r24, 0x00	; 0
			set_sda_to_output();				// initiate send data

			break;
 41e:	2f c0       	rjmp	.+94     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>

		// data sent to master, request ack (or nack) from master

		case(of_state_request_ack):
		{
			of_state = of_state_check_ack;
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <of_state>

			USIDR		= 0x00;
 426:	1f b8       	out	0x0f, r1	; 15
			set_counter = 0x0e;					//	receive 1 bit (2 edges)
			set_sda_to_input();					//	initiate receive ack
 428:	17 df       	rcall	.-466    	; 0x258 <set_sda_to_input>
		case(of_state_request_ack):
		{
			of_state = of_state_check_ack;

			USIDR		= 0x00;
			set_counter = 0x0e;					//	receive 1 bit (2 edges)
 42a:	8e e0       	ldi	r24, 0x0E	; 14
			set_sda_to_input();					//	initiate receive ack

			break;
 42c:	28 c0       	rjmp	.+80     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>

		// ack/nack from master received

		case(of_state_check_ack):
		{
			if(data)	// if NACK, the master does not want more data
 42e:	22 23       	and	r18, r18
 430:	29 f0       	breq	.+10     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			{
				of_state = of_state_check_address;
 432:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <of_state>
				set_counter = 0x00;
				twi_reset();
 436:	18 df       	rcall	.-464    	; 0x268 <twi_reset>
		case(of_state_check_ack):
		{
			if(data)	// if NACK, the master does not want more data
			{
				of_state = of_state_check_address;
				set_counter = 0x00;
 438:	80 e0       	ldi	r24, 0x00	; 0
			{
				of_state = of_state_send_data;
				goto again;	// from here we just drop straight into state_send_data
			}				// don't wait for another overflow interrupt

			break;
 43a:	21 c0       	rjmp	.+66     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				set_counter = 0x00;
				twi_reset();
			}
			else
			{
				of_state = of_state_send_data;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <of_state>
				goto again;	// from here we just drop straight into state_send_data
 442:	9f cf       	rjmp	.-194    	; 0x382 <__vector_8+0x3e>

		// process write request from master

		case(of_state_receive_data):
		{
			ss_state = ss_state_data_processed;
 444:	84 e0       	ldi	r24, 0x04	; 4
 446:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <ss_state>

			of_state = of_state_store_data_and_send_ack;
 44a:	85 e0       	ldi	r24, 0x05	; 5
 44c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <of_state>

			set_counter = 0x00;					// receive 1 bit (2 edges)
			set_sda_to_input();					// initiate receive data
 450:	03 df       	rcall	.-506    	; 0x258 <set_sda_to_input>
		{
			ss_state = ss_state_data_processed;

			of_state = of_state_store_data_and_send_ack;

			set_counter = 0x00;					// receive 1 bit (2 edges)
 452:	80 e0       	ldi	r24, 0x00	; 0
			set_sda_to_input();					// initiate receive data

			break;
 454:	14 c0       	rjmp	.+40     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>

		// data received from master, store it and wait for more data

		case(of_state_store_data_and_send_ack):
		{
			of_state = of_state_receive_data;
 456:	84 e0       	ldi	r24, 0x04	; 4
 458:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <of_state>

			if(input_buffer_length < (USI_TWI_BUFFER_SIZE - 1))
 45c:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <input_buffer_length>
 460:	ef 31       	cpi	r30, 0x1F	; 31
 462:	40 f4       	brcc	.+16     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
				input_buffer[input_buffer_length++] = data;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	8e 0f       	add	r24, r30
 468:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <input_buffer_length>
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	ee 56       	subi	r30, 0x6E	; 110
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	20 83       	st	Z, r18

			USIDR		= 0x00;
 474:	1f b8       	out	0x0f, r1	; 15
			set_counter = 0x0e;					// send 1 bit (2 edges)
			set_sda_to_output();				// initiate send ack
 476:	f4 de       	rcall	.-536    	; 0x260 <set_sda_to_output>

			if(input_buffer_length < (USI_TWI_BUFFER_SIZE - 1))
				input_buffer[input_buffer_length++] = data;

			USIDR		= 0x00;
			set_counter = 0x0e;					// send 1 bit (2 edges)
 478:	8e e0       	ldi	r24, 0x0E	; 14
			set_sda_to_output();				// initiate send ack

			break;
 47a:	01 c0       	rjmp	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
{
	// bit shift register overflow condition occured
	// scl forced low until overflow condition is cleared!

	uint8_t data		= USIDR;
	uint8_t set_counter = 0x00;		// send 8 bits (16 edges)
 47c:	80 e0       	ldi	r24, 0x00	; 0

	USISR =
		(0				<< USISIF)	|		// don't clear start condition flag
		(1				<< USIOIF)	|		// clear overflow condition flag
		(0				<< USIPF)	|		// don't clear stop condition flag
		(1				<< USIDC)	|		// clear arbitration error flag
 47e:	80 65       	ori	r24, 0x50	; 80

			break;
		}
	}

	USISR =
 480:	8e b9       	out	0x0e, r24	; 14
		(0				<< USISIF)	|		// don't clear start condition flag
		(1				<< USIOIF)	|		// clear overflow condition flag
		(0				<< USIPF)	|		// don't clear stop condition flag
		(1				<< USIDC)	|		// clear arbitration error flag
		(set_counter	<< USICNT0);		// set counter to 8 or 1 bits
}
 482:	ff 91       	pop	r31
 484:	ef 91       	pop	r30
 486:	bf 91       	pop	r27
 488:	af 91       	pop	r26
 48a:	9f 91       	pop	r25
 48c:	8f 91       	pop	r24
 48e:	7f 91       	pop	r23
 490:	6f 91       	pop	r22
 492:	5f 91       	pop	r21
 494:	4f 91       	pop	r20
 496:	3f 91       	pop	r19
 498:	2f 91       	pop	r18
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <usi_twi_slave>:

void usi_twi_slave(uint8_t slave_address_in, uint8_t use_sleep,
			void (*data_callback_in)(uint8_t input_buffer_length, const uint8_t *input_buffer,
			uint8_t *output_buffer_length, uint8_t *output_buffer),
			void (*idle_callback_in)(void))
{
 4a4:	d6 2f       	mov	r29, r22
	uint8_t	call_datacallback = 0;

	slave_address			= slave_address_in;
 4a6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <slave_address>
	data_callback			= data_callback_in;
 4aa:	50 93 b6 00 	sts	0x00B6, r21	; 0x8000b6 <data_callback+0x1>
 4ae:	40 93 b5 00 	sts	0x00B5, r20	; 0x8000b5 <data_callback>
	idle_callback			= idle_callback_in;
 4b2:	30 93 b8 00 	sts	0x00B8, r19	; 0x8000b8 <idle_callback+0x1>
 4b6:	20 93 b7 00 	sts	0x00B7, r18	; 0x8000b7 <idle_callback>

	input_buffer_length		= 0;
 4ba:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <input_buffer_length>
	output_buffer_length	= 0;
 4be:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <output_buffer_length>
	output_buffer_current	= 0;
 4c2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <output_buffer_current>
	ss_state				= ss_state_before_start;
 4c6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <ss_state>

	if(use_sleep)
 4ca:	66 23       	and	r22, r22
 4cc:	19 f0       	breq	.+6      	; 0x4d4 <usi_twi_slave+0x30>
		set_sleep_mode(SLEEP_MODE_IDLE);
 4ce:	85 b7       	in	r24, 0x35	; 53
 4d0:	87 7e       	andi	r24, 0xE7	; 231
 4d2:	85 bf       	out	0x35, r24	; 53

static inline void twi_init(void)
{
#if defined(USIPP)
#if  defined(USI_ON_PORT_A)
	USIPP |= _BV(USIPOS);
 4d4:	81 b3       	in	r24, 0x11	; 17
 4d6:	81 60       	ori	r24, 0x01	; 1
 4d8:	81 bb       	out	0x11, r24	; 17
#else
	USIPP &= ~_BV(USIPOS);
# endif
#endif

	twi_reset();
 4da:	c6 de       	rcall	.-628    	; 0x268 <twi_reset>
	if(use_sleep)
		set_sleep_mode(SLEEP_MODE_IDLE);

	twi_init();

	sei();
 4dc:	78 94       	sei

void usi_twi_slave(uint8_t slave_address_in, uint8_t use_sleep,
			void (*data_callback_in)(uint8_t input_buffer_length, const uint8_t *input_buffer,
			uint8_t *output_buffer_length, uint8_t *output_buffer),
			void (*idle_callback_in)(void))
{
 4de:	c0 e0       	ldi	r28, 0x00	; 0

	sei();

	for(;;)
	{
		if(idle_callback)
 4e0:	e0 91 b7 00 	lds	r30, 0x00B7	; 0x8000b7 <idle_callback>
 4e4:	f0 91 b8 00 	lds	r31, 0x00B8	; 0x8000b8 <idle_callback+0x1>
 4e8:	30 97       	sbiw	r30, 0x00	; 0
 4ea:	71 f0       	breq	.+28     	; 0x508 <usi_twi_slave+0x64>
		{
			idle_callback();
 4ec:	09 95       	icall

			if(stats_enabled)
 4ee:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <stats_enabled>
 4f2:	88 23       	and	r24, r24
 4f4:	49 f0       	breq	.+18     	; 0x508 <usi_twi_slave+0x64>
				idle_call_count++;
 4f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <idle_call_count>
 4fa:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <idle_call_count+0x1>
 4fe:	01 96       	adiw	r24, 0x01	; 1
 500:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <idle_call_count+0x1>
 504:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <idle_call_count>
		}

		if(use_sleep && (ss_state == ss_state_before_start))
 508:	dd 23       	and	r29, r29
 50a:	59 f0       	breq	.+22     	; 0x522 <usi_twi_slave+0x7e>
 50c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <ss_state>
 510:	81 11       	cpse	r24, r1
 512:	07 c0       	rjmp	.+14     	; 0x522 <usi_twi_slave+0x7e>
			sleep_mode();
 514:	85 b7       	in	r24, 0x35	; 53
 516:	80 62       	ori	r24, 0x20	; 32
 518:	85 bf       	out	0x35, r24	; 53
 51a:	88 95       	sleep
 51c:	85 b7       	in	r24, 0x35	; 53
 51e:	8f 7d       	andi	r24, 0xDF	; 223
 520:	85 bf       	out	0x35, r24	; 53

		if(USISR & _BV(USIPF))
 522:	75 9b       	sbis	0x0e, 5	; 14
 524:	2d c0       	rjmp	.+90     	; 0x580 <usi_twi_slave+0xdc>
		{
			cli();
 526:	f8 94       	cli

			if(stats_enabled)
 528:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <stats_enabled>
 52c:	88 23       	and	r24, r24
 52e:	49 f0       	breq	.+18     	; 0x542 <usi_twi_slave+0x9e>
				stop_conditions_count++;
 530:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <stop_conditions_count>
 534:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <stop_conditions_count+0x1>
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <stop_conditions_count+0x1>
 53e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <stop_conditions_count>

			USISR |= _BV(USIPF);	// clear stop condition flag
 542:	8e b1       	in	r24, 0x0e	; 14
 544:	80 62       	ori	r24, 0x20	; 32
 546:	8e b9       	out	0x0e, r24	; 14

			switch(ss_state)
 548:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <ss_state>
 54c:	81 30       	cpi	r24, 0x01	; 1
 54e:	19 f0       	breq	.+6      	; 0x556 <usi_twi_slave+0xb2>
 550:	84 30       	cpi	r24, 0x04	; 4
 552:	19 f0       	breq	.+6      	; 0x55a <usi_twi_slave+0xb6>
 554:	12 c0       	rjmp	.+36     	; 0x57a <usi_twi_slave+0xd6>
			{
				case(ss_state_after_start):
				{
					twi_reset();
 556:	88 de       	rcall	.-752    	; 0x268 <twi_reset>
					break;
 558:	10 c0       	rjmp	.+32     	; 0x57a <usi_twi_slave+0xd6>
				}

				case(ss_state_data_processed):
				{
					if(stats_enabled)
 55a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <stats_enabled>
 55e:	88 23       	and	r24, r24
 560:	59 f0       	breq	.+22     	; 0x578 <usi_twi_slave+0xd4>
						local_frames_count++;
 562:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <local_frames_count>
 566:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <local_frames_count+0x1>
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <local_frames_count+0x1>
 570:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <local_frames_count>

					call_datacallback = 1;
 574:	c1 e0       	ldi	r28, 0x01	; 1
 576:	01 c0       	rjmp	.+2      	; 0x57a <usi_twi_slave+0xd6>
 578:	c1 e0       	ldi	r28, 0x01	; 1

					break;
				}
			}

			ss_state = ss_state_before_start;
 57a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <ss_state>

			sei();
 57e:	78 94       	sei
		}

		if(call_datacallback)
 580:	cc 23       	and	r28, r28
 582:	09 f4       	brne	.+2      	; 0x586 <usi_twi_slave+0xe2>
 584:	ad cf       	rjmp	.-166    	; 0x4e0 <usi_twi_slave+0x3c>
		{
			output_buffer_length	= 0;
 586:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <output_buffer_length>
			output_buffer_current	= 0;
 58a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <output_buffer_current>
			data_callback(input_buffer_length, input_buffer, &output_buffer_length, output_buffer);
 58e:	e0 91 b5 00 	lds	r30, 0x00B5	; 0x8000b5 <data_callback>
 592:	f0 91 b6 00 	lds	r31, 0x00B6	; 0x8000b6 <data_callback+0x1>
 596:	21 e7       	ldi	r18, 0x71	; 113
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	40 e7       	ldi	r20, 0x70	; 112
 59c:	50 e0       	ldi	r21, 0x00	; 0
 59e:	62 e9       	ldi	r22, 0x92	; 146
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <input_buffer_length>
 5a6:	09 95       	icall
			input_buffer_length		= 0;
 5a8:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <input_buffer_length>
 5ac:	98 cf       	rjmp	.-208    	; 0x4de <usi_twi_slave+0x3a>

000005ae <_exit>:
 5ae:	f8 94       	cli

000005b0 <__stop_program>:
 5b0:	ff cf       	rjmp	.-2      	; 0x5b0 <__stop_program>
